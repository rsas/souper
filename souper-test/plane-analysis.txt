; starting synthesis for LHS
%0 = block 3
%1:i8 = var
%2:i8 = and 1:i8, %1
%3:i1 = eq 0:i8, %2
blockpc %0 0 %3 1:i1
blockpc %0 1 %3 0:i1
%4:i8 = and 2:i8, %1
%5:i1 = eq 0:i8, %4
blockpc %0 1 %5 1:i1
blockpc %0 2 %3 0:i1
blockpc %0 2 %5 0:i1
%6:i8 = or 1:i8, %1
%7:i8 = and 252:i8, %1
%8:i8 = or 2:i8, %7
%9:i8 = phi %0, %6, %8, 0:i8
%10:i8 = and 3:i8, %9
infer %10
inputs: 1, constants: 2
N: 3, M: 5
default width: 8
output width: 8
component library: add (8, { 8 8 }); and (8, { 8 8 }); 
const components: const (8); const (8); 
I: 0_1 (input,i8) 0_2 (const,i8) 0_3 (const,i8) 
P: 1_1 (add,i8) 1_2 (add,i8) 2_1 (and,i8) 2_2 (and,i8) 
R: 1_0 (add,i8) 2_0 (and,i8) 
L: 0_1 (input,i8) 0_2 (const,i8) 0_3 (const,i8) 1_1 (add,i8) 1_2 (add,i8) 2_1 (and,i8) 2_2 (and,i8) 1_0 (add,i8) 2_0 (and,i8) 3_0 (output,i8) 
O: 3_0 (output,i8)
consistency constraints:
1_0 (add,i8) != 2_0 (and,i8)
acyclicity constraints:
1_1 (add,i8) < 1_0
1_2 (add,i8) < 1_0
2_1 (and,i8) < 2_0
2_2 (and,i8) < 2_0
location variable constraints:
0 <= 1_1 (add,i8) < 5
0 <= 1_2 (add,i8) < 5
0 <= 2_1 (and,i8) < 5
0 <= 2_2 (and,i8) < 5
0 <= 0_1 (input,i8) < 5
0 <= 0_2 (const,i8) < 5
0 <= 0_3 (const,i8) < 5
3 <= 1_0 (add,i8) < 5
3 <= 2_0 (and,i8) < 5
input-definedness constraints:
1_1 (add,i8) == 0_1 (input,i8) || 1_1 (add,i8) == 0_2 (const,i8) || 1_1 (add,i8) == 0_3 (const,i8) || 1_1 (add,i8) == 2_0 (and,i8) || false
1_2 (add,i8) == 0_1 (input,i8) || 1_2 (add,i8) == 0_2 (const,i8) || 1_2 (add,i8) == 0_3 (const,i8) || 1_2 (add,i8) == 2_0 (and,i8) || false
2_1 (and,i8) == 0_1 (input,i8) || 2_1 (and,i8) == 0_2 (const,i8) || 2_1 (and,i8) == 0_3 (const,i8) || 2_1 (and,i8) == 1_0 (add,i8) || false
2_2 (and,i8) == 0_1 (input,i8) || 2_2 (and,i8) == 0_2 (const,i8) || 2_2 (and,i8) == 0_3 (const,i8) || 2_2 (and,i8) == 1_0 (add,i8) || false
component input-to-constant constraints:
1_1 (add,i8) == 0_2 (const,i8) || 1_1 (add,i8) == 0_3 (const,i8) || false
1_2 (add,i8) == 0_2 (const,i8) || 1_2 (add,i8) == 0_3 (const,i8) || false
false
2_1 (and,i8) == 0_2 (const,i8) || 2_1 (and,i8) == 0_3 (const,i8) || false
2_2 (and,i8) == 0_2 (const,i8) || 2_2 (and,i8) == 0_3 (const,i8) || false
false
output-definedness constraints:
3_0 (output,i8) == 0_1 (input,i8) || 3_0 (output,i8) == 0_2 (const,i8) || 3_0 (output,i8) == 0_3 (const,i8) || 3_0 (output,i8) == 1_0 (add,i8) || 3_0 (output,i8) == 2_0 (and,i8) || false
possible wirings:
0_1 (input,i8) == 1_1 (add,i8)
0_1 (input,i8) == 1_2 (add,i8)
0_1 (input,i8) == 2_1 (and,i8)
0_1 (input,i8) == 2_2 (and,i8)
0_1 (input,i8) == 3_0 (output,i8)
0_2 (const,i8) == 1_1 (add,i8)
0_2 (const,i8) == 1_2 (add,i8)
0_2 (const,i8) == 2_1 (and,i8)
0_2 (const,i8) == 2_2 (and,i8)
0_2 (const,i8) == 3_0 (output,i8)
0_3 (const,i8) == 1_1 (add,i8)
0_3 (const,i8) == 1_2 (add,i8)
0_3 (const,i8) == 2_1 (and,i8)
0_3 (const,i8) == 2_2 (and,i8)
0_3 (const,i8) == 3_0 (output,i8)
1_1 (add,i8) == 2_0 (and,i8)
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
2_2 (and,i8) == 1_0 (add,i8)
1_0 (add,i8) == 3_0 (output,i8)
2_0 (and,i8) == 3_0 (output,i8)
synthesizing using 0 component(s)
0 <= 3_0 (output,i8) < 3
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 3_0 (output,i8) 
2	0_1 (input,i8) 2_1 (and,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 
found valid wiring, output 0_2 (const,i8).
creating program from wiring
- starting with OutLoc 0_2 (const,i8), OpLocs { }
- creating constant inst 0_2 (const,i8) with value 0
candidate:
result 0:i8
didn't work for all inputs (#cex: 5, refinement: 1)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 0_2 (const,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 3_0 (output,i8) 
1	0_2 (const,i8) 1_1 (add,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 2_1 (and,i8) 2_2 (and,i8) 
3	2_0 (and,i8) 
4	1_0 (add,i8) 
found valid wiring, output 0_3 (const,i8).
creating program from wiring
- starting with OutLoc 0_3 (const,i8), OpLocs { }
- creating constant inst 0_3 (const,i8) with value 2
candidate:
result 2:i8
didn't work for all inputs (#cex: 5, refinement: 2)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 0_3 (const,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. UNSAT
synthesizing using 1 component(s)
3 <= 3_0 (output,i8) < 4
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 2_1 (and,i8) 
3	2_0 (and,i8) 3_0 (output,i8) 
4	1_0 (add,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%11:i8 = and 0:i8, %1
result %11
candidate:
result %11
didn't work for all inputs (#cex: 6, refinement: 1)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_3 (const,i8) 1_1 (add,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 2_2 (and,i8) 
3	2_0 (and,i8) 3_0 (output,i8) 
4	1_0 (add,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 6, refinement: 2)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 3_0 (output,i8) 
4	1_0 (add,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 6, refinement: 3)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_1 (add,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 3_0 (output,i8) 
4	0_2 (const,i8) 1_0 (add,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 6, refinement: 4)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. UNSAT
synthesizing using 2 component(s)
3 <= 3_0 (output,i8) < 5
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%12:i8 = add %1, %1
result %12
- creating inst and, width 8
before junk removal:
%13:i8 = and 0:i8, %12
result %13
candidate:
result %13
didn't work for all inputs (#cex: 6, refinement: 1)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %12
- creating inst and, width 8
before junk removal:
%14:i8 = and 1:i8, %12
result %14
candidate:
result %14
didn't work for all inputs (#cex: 6, refinement: 2)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 1
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %12
- creating inst and, width 8
before junk removal:
result %13
candidate:
result %13
didn't work for all inputs (#cex: 6, refinement: 3)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %12
- creating inst and, width 8
before junk removal:
result %14
candidate:
result %14
didn't work for all inputs (#cex: 6, refinement: 4)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_3 (const,i8) 2_1 (and,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 21
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%15:i8 = add 21:i8, %1
result %15
- creating inst and, width 8
before junk removal:
%16:i8 = and 0:i8, %15
result %16
candidate:
result %16
didn't work for all inputs (#cex: 6, refinement: 5)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 21
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 1_2 (add,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
%17:i8 = add 0:i8, %1
result %17
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 6, refinement: 6)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %12
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %13
candidate:
result %13
didn't work for all inputs (#cex: 6, refinement: 7)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %12
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- creating inst and, width 8
before junk removal:
result %14
candidate:
result %14
didn't work for all inputs (#cex: 6, refinement: 8)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 1
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 9
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%18:i8 = add 9:i8, %1
result %18
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%19:i8 = and 0:i8, %18
result %19
candidate:
result %19
didn't work for all inputs (#cex: 6, refinement: 9)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 9
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 9
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %18
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 32
- creating inst and, width 8
before junk removal:
%20:i8 = and 32:i8, %18
result %20
candidate:
result %20
didn't work for all inputs (#cex: 6, refinement: 10)
counterexample: in_0_1 = 56
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 9
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 32
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 14
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%21:i8 = add 14:i8, %1
result %21
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%22:i8 = and 0:i8, %21
result %22
candidate:
result %22
didn't work for all inputs (#cex: 7, refinement: 11)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 14
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 14
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %21
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 32
- creating inst and, width 8
before junk removal:
%23:i8 = and 32:i8, %21
result %23
candidate:
result %23
didn't work for all inputs (#cex: 7, refinement: 12)
counterexample: in_0_1 = 19
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 14
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 32
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 1_2 (add,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %17
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 8, refinement: 13)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 1_1 (add,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %17
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 8, refinement: 14)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_2 (and,i8) 
1	0_2 (const,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %12
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %13
candidate:
result %13
didn't work for all inputs (#cex: 8, refinement: 15)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 1_1 (add,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %17
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 8, refinement: 16)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -124
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%24:i8 = add 132:i8, %1
result %24
- creating inst and, width 8
before junk removal:
%25:i8 = and 0:i8, %24
result %25
candidate:
result %25
didn't work for all inputs (#cex: 8, refinement: 17)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -124
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 2_2 (and,i8) 
1	0_2 (const,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %17
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 8, refinement: 18)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %17
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 8, refinement: 19)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 2_1 (and,i8) 
1	0_2 (const,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %17
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 8, refinement: 20)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_1 (add,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %12
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- creating inst and, width 8
before junk removal:
result %14
candidate:
result %14
didn't work for all inputs (#cex: 8, refinement: 21)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 36
- creating inst add, width 8
before junk removal:
%26:i8 = add 36:i8, %1
result %26
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%27:i8 = and 0:i8, %26
result %27
candidate:
result %27
didn't work for all inputs (#cex: 8, refinement: 22)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 36
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_3 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 9
- creating inst add, width 8
before junk removal:
result %18
- creating inst and, width 8
before junk removal:
result %19
candidate:
result %19
didn't work for all inputs (#cex: 8, refinement: 23)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 9
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%28:i8 = add 1:i8, %1
result %28
- creating inst and, width 8
before junk removal:
%29:i8 = and 0:i8, %28
result %29
candidate:
result %29
didn't work for all inputs (#cex: 8, refinement: 24)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
%30:i8 = add %11, %11
result %30
candidate:
result %30
didn't work for all inputs (#cex: 8, refinement: 25)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 1_2 (add,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
%31:i8 = add 0:i8, %11
result %31
candidate:
result %11
didn't work for all inputs (#cex: 8, refinement: 26)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 10
- creating inst add, width 8
before junk removal:
%32:i8 = add 10:i8, %1
result %32
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%33:i8 = and 0:i8, %32
result %33
candidate:
result %33
didn't work for all inputs (#cex: 8, refinement: 27)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 10
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 9
- creating inst add, width 8
before junk removal:
result %18
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %19
candidate:
result %19
didn't work for all inputs (#cex: 8, refinement: 28)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 9
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 8
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%34:i8 = add 8:i8, %1
result %34
- creating inst and, width 8
before junk removal:
%35:i8 = and 0:i8, %34
result %35
candidate:
result %35
didn't work for all inputs (#cex: 8, refinement: 29)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 8
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 2_2 (and,i8) 
1	0_2 (const,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %17
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 8, refinement: 30)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 
1	0_1 (input,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 2_1 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -128
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
%36:i8 = and 128:i8, %1
result %36
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -128
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %36
- creating inst add, width 8
before junk removal:
%37:i8 = add %36, %36
result %37
candidate:
result %37
didn't work for all inputs (#cex: 8, refinement: 31)
counterexample: in_0_1 = 2
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -128
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -128
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_3 (const,i8) 2_1 (and,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %17
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 9, refinement: 32)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 2_1 (and,i8) 
1	0_2 (const,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %17
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 9, refinement: 33)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 2_1 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %30
candidate:
result %30
didn't work for all inputs (#cex: 9, refinement: 34)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %17
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 9, refinement: 35)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- creating inst add, width 8
before junk removal:
result %28
- creating inst and, width 8
before junk removal:
result %29
candidate:
result %29
didn't work for all inputs (#cex: 9, refinement: 36)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_2 (and,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- creating inst and, width 8
before junk removal:
result %4
- creating inst add, width 8
before junk removal:
%38:i8 = add 1:i8, %4
result %38
candidate:
result %38
didn't work for all inputs (#cex: 9, refinement: 37)
counterexample: in_0_1 = 3
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 1
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %17
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 38)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %17
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 39)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 64
- creating inst add, width 8
before junk removal:
%39:i8 = add 64:i8, %1
result %39
- creating inst and, width 8
before junk removal:
%40:i8 = and 0:i8, %39
result %40
candidate:
result %40
didn't work for all inputs (#cex: 10, refinement: 40)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 64
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 32
- creating inst add, width 8
before junk removal:
%41:i8 = add 32:i8, %1
result %41
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%42:i8 = and 0:i8, %41
result %42
candidate:
result %42
didn't work for all inputs (#cex: 10, refinement: 41)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 32
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_3 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 10
- creating inst add, width 8
before junk removal:
result %32
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %33
candidate:
result %33
didn't work for all inputs (#cex: 10, refinement: 42)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 10
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 34
- creating inst add, width 8
before junk removal:
%43:i8 = add 34:i8, %1
result %43
- creating inst and, width 8
before junk removal:
%44:i8 = and 0:i8, %43
result %44
candidate:
result %44
didn't work for all inputs (#cex: 10, refinement: 43)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 34
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_2 (const,i8) 1_1 (add,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 17
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%45:i8 = add 17:i8, %1
result %45
- creating inst and, width 8
before junk removal:
%46:i8 = and 0:i8, %45
result %46
candidate:
result %46
didn't work for all inputs (#cex: 10, refinement: 44)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 17
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %17
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 45)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 20
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%47:i8 = add 20:i8, %1
result %47
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%48:i8 = and 0:i8, %47
result %48
candidate:
result %48
didn't work for all inputs (#cex: 10, refinement: 46)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 20
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 38
- creating inst add, width 8
before junk removal:
%49:i8 = add 38:i8, %1
result %49
- creating inst and, width 8
before junk removal:
%50:i8 = and 0:i8, %49
result %50
candidate:
result %50
didn't work for all inputs (#cex: 10, refinement: 47)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 38
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 39
- creating inst add, width 8
before junk removal:
%51:i8 = add 39:i8, %1
result %51
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%52:i8 = and 0:i8, %51
result %52
candidate:
result %52
didn't work for all inputs (#cex: 10, refinement: 48)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 39
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %17
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 49)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_2 (const,i8) 2_1 (and,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 18
- creating inst add, width 8
before junk removal:
%53:i8 = add 18:i8, %1
result %53
- creating inst and, width 8
before junk removal:
%54:i8 = and 0:i8, %53
result %54
candidate:
result %54
didn't work for all inputs (#cex: 10, refinement: 50)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 18
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 15
- creating inst add, width 8
before junk removal:
%55:i8 = add 15:i8, %1
result %55
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%56:i8 = and 0:i8, %55
result %56
candidate:
result %56
didn't work for all inputs (#cex: 10, refinement: 51)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 15
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -113
- creating inst add, width 8
before junk removal:
%57:i8 = add 143:i8, %1
result %57
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%58:i8 = and 0:i8, %57
result %58
candidate:
result %58
didn't work for all inputs (#cex: 10, refinement: 52)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -113
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %28
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %29
candidate:
result %29
didn't work for all inputs (#cex: 10, refinement: 53)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 1
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value -128
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%59:i8 = add 128:i8, %1
result %59
- creating inst and, width 8
before junk removal:
%60:i8 = and 0:i8, %59
result %60
candidate:
result %60
didn't work for all inputs (#cex: 10, refinement: 54)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == -128
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 12
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%61:i8 = add 12:i8, %1
result %61
- creating inst and, width 8
before junk removal:
%62:i8 = and 0:i8, %61
result %62
candidate:
result %62
didn't work for all inputs (#cex: 10, refinement: 55)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 12
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 16
- creating inst add, width 8
before junk removal:
%63:i8 = add 16:i8, %1
result %63
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%64:i8 = and 0:i8, %63
result %64
candidate:
result %64
didn't work for all inputs (#cex: 10, refinement: 56)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 16
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_3 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 16
- creating inst add, width 8
before junk removal:
result %63
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %64
candidate:
result %64
didn't work for all inputs (#cex: 10, refinement: 57)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 16
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %17
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 58)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 113
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%65:i8 = add 113:i8, %1
result %65
- creating inst and, width 8
before junk removal:
%66:i8 = and 0:i8, %65
result %66
candidate:
result %66
didn't work for all inputs (#cex: 10, refinement: 59)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 113
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 48
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%67:i8 = add 48:i8, %1
result %67
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%68:i8 = and 0:i8, %67
result %68
candidate:
result %68
didn't work for all inputs (#cex: 10, refinement: 60)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 48
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 29
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%69:i8 = add 29:i8, %1
result %69
- creating inst and, width 8
before junk removal:
%70:i8 = and 0:i8, %69
result %70
candidate:
result %70
didn't work for all inputs (#cex: 10, refinement: 61)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 29
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -19
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%71:i8 = add 237:i8, %1
result %71
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%72:i8 = and 0:i8, %71
result %72
candidate:
result %72
didn't work for all inputs (#cex: 10, refinement: 62)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -19
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%73:i8 = add 245:i8, %1
result %73
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%74:i8 = and 0:i8, %73
result %74
candidate:
result %74
didn't work for all inputs (#cex: 10, refinement: 63)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -11
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 35
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%75:i8 = add 35:i8, %1
result %75
- creating inst and, width 8
before junk removal:
%76:i8 = and 0:i8, %75
result %76
candidate:
result %76
didn't work for all inputs (#cex: 10, refinement: 64)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 35
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- creating inst add, width 8
before junk removal:
%77:i8 = add 2:i8, %1
result %77
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%78:i8 = and 0:i8, %77
result %78
candidate:
result %78
didn't work for all inputs (#cex: 10, refinement: 65)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_2 (and,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 12
- creating inst add, width 8
before junk removal:
result %61
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %62
candidate:
result %62
didn't work for all inputs (#cex: 10, refinement: 66)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 12
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 32
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %41
- creating inst and, width 8
before junk removal:
result %42
candidate:
result %42
didn't work for all inputs (#cex: 10, refinement: 67)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 32
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 32
- creating inst add, width 8
before junk removal:
result %41
- creating inst and, width 8
before junk removal:
result %42
candidate:
result %42
didn't work for all inputs (#cex: 10, refinement: 68)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 32
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 33
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%79:i8 = add 33:i8, %1
result %79
- creating inst and, width 8
before junk removal:
%80:i8 = and 0:i8, %79
result %80
candidate:
result %80
didn't work for all inputs (#cex: 10, refinement: 69)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
cand reached MaxWiringAttempts (10), forbidding
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 18
- creating inst add, width 8
before junk removal:
result %53
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %54
candidate:
result %54
didn't work for all inputs (#cex: 10, refinement: 70)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 18
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -121
- creating inst add, width 8
before junk removal:
%81:i8 = add 135:i8, %1
result %81
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%82:i8 = and 0:i8, %81
result %82
candidate:
result %82
didn't work for all inputs (#cex: 10, refinement: 71)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -121
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %28
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %29
candidate:
result %29
didn't work for all inputs (#cex: 10, refinement: 72)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 5
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%83:i8 = add 5:i8, %1
result %83
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%84:i8 = and 0:i8, %83
result %84
candidate:
result %84
didn't work for all inputs (#cex: 10, refinement: 73)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 5
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 96
- creating inst add, width 8
before junk removal:
%85:i8 = add 96:i8, %1
result %85
- creating inst and, width 8
before junk removal:
%86:i8 = and 0:i8, %85
result %86
candidate:
result %86
didn't work for all inputs (#cex: 10, refinement: 74)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 96
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 16
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %63
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %64
candidate:
result %64
didn't work for all inputs (#cex: 10, refinement: 75)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 16
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_3 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 31
- creating inst add, width 8
before junk removal:
%87:i8 = add 31:i8, %1
result %87
- creating inst and, width 8
before junk removal:
%88:i8 = and 0:i8, %87
result %88
candidate:
result %88
didn't work for all inputs (#cex: 10, refinement: 76)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 31
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 0_3 (const,i8) 1_2 (add,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 77)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 21
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %15
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %16
candidate:
result %16
didn't work for all inputs (#cex: 10, refinement: 78)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
cand reached MaxWiringAttempts (10), forbidding
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value -48
- creating inst add, width 8
before junk removal:
%89:i8 = add 208:i8, %1
result %89
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%90:i8 = and 0:i8, %89
result %90
candidate:
result %90
didn't work for all inputs (#cex: 10, refinement: 79)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == -48
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_2 (const,i8) 2_2 (and,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 8
- creating inst add, width 8
before junk removal:
result %34
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %35
candidate:
result %35
didn't work for all inputs (#cex: 10, refinement: 80)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 8
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- creating inst add, width 8
before junk removal:
result %77
- creating inst and, width 8
before junk removal:
result %78
candidate:
result %78
didn't work for all inputs (#cex: 10, refinement: 81)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
cand reached MaxWiringAttempts (10), forbidding
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value -128
- creating inst add, width 8
before junk removal:
result %59
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %60
candidate:
result %60
didn't work for all inputs (#cex: 10, refinement: 82)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
cand reached MaxWiringAttempts (10), forbidding
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
2_2 (and,i8) == 0_2 (const,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_2 (and,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 17
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %45
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %46
candidate:
result %46
didn't work for all inputs (#cex: 10, refinement: 83)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 17
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_2 (and,i8) 
1	0_3 (const,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 2_1 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 84)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- creating inst add, width 8
before junk removal:
result %28
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %29
candidate:
result %29
didn't work for all inputs (#cex: 10, refinement: 85)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
cand reached MaxWiringAttempts (10), forbidding
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
2_2 (and,i8) == 0_3 (const,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_3 (const,i8) 2_1 (and,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 34
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %43
- creating inst and, width 8
before junk removal:
result %44
candidate:
result %44
didn't work for all inputs (#cex: 10, refinement: 86)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 34
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_2 (and,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 8
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %34
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %35
candidate:
result %35
didn't work for all inputs (#cex: 10, refinement: 87)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 8
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_3 (const,i8) 2_1 (and,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 10
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %32
- creating inst and, width 8
before junk removal:
result %33
candidate:
result %33
didn't work for all inputs (#cex: 10, refinement: 88)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 10
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_1 (input,i8) 1_2 (add,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 4
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%91:i8 = add 4:i8, %1
result %91
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%92:i8 = and 0:i8, %91
result %92
candidate:
result %92
didn't work for all inputs (#cex: 10, refinement: 89)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 4
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_2 (add,i8) 
1	0_1 (input,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 2_1 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %4
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- creating inst add, width 8
before junk removal:
result %38
candidate:
result %38
didn't work for all inputs (#cex: 10, refinement: 90)
counterexample: in_0_1 = 3
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %4
- creating inst add, width 8
before junk removal:
result %38
candidate:
result %38
didn't work for all inputs (#cex: 10, refinement: 91)
counterexample: in_0_1 = 3
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 1
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_2 (const,i8) 1_1 (add,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %77
- creating inst and, width 8
before junk removal:
result %78
candidate:
result %78
didn't work for all inputs (#cex: 10, refinement: 92)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 10
- creating inst add, width 8
before junk removal:
result %32
- creating inst and, width 8
before junk removal:
result %33
candidate:
result %33
didn't work for all inputs (#cex: 10, refinement: 93)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 10
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 16
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %63
- creating inst and, width 8
before junk removal:
result %64
candidate:
result %64
didn't work for all inputs (#cex: 10, refinement: 94)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 16
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
%93:i8 = add 11:i8, %1
result %93
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
%94:i8 = and 0:i8, %93
result %94
candidate:
result %94
didn't work for all inputs (#cex: 10, refinement: 95)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 11
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -128
- creating inst and, width 8
before junk removal:
result %36
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -128
- creating inst and, width 8
before junk removal:
result %36
- creating inst add, width 8
before junk removal:
result %37
candidate:
result %37
didn't work for all inputs (#cex: 10, refinement: 96)
counterexample: in_0_1 = 2
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -128
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -128
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value -128
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %36
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value -128
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %36
- creating inst add, width 8
before junk removal:
result %37
candidate:
result %37
didn't work for all inputs (#cex: 10, refinement: 97)
counterexample: in_0_1 = 2
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == -128
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == -128
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %30
candidate:
result %30
didn't work for all inputs (#cex: 10, refinement: 98)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_3 (const,i8) 1_2 (add,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 99)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_3 (const,i8) 1_2 (add,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- creating inst add, width 8
before junk removal:
%95:i8 = add 2:i8, %11
result %95
candidate:
result %95
didn't work for all inputs (#cex: 10, refinement: 100)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 20
- creating inst add, width 8
before junk removal:
result %47
- creating inst and, width 8
before junk removal:
result %48
candidate:
result %48
didn't work for all inputs (#cex: 10, refinement: 101)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 20
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %73
- creating inst and, width 8
before junk removal:
result %74
candidate:
result %74
didn't work for all inputs (#cex: 10, refinement: 102)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -11
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 12
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %61
- creating inst and, width 8
before junk removal:
result %62
candidate:
result %62
didn't work for all inputs (#cex: 10, refinement: 103)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
cand reached MaxWiringAttempts (10), forbidding
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
1_2 (add,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_1 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst add, width 8
before junk removal:
result %77
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %78
candidate:
result %78
didn't work for all inputs (#cex: 10, refinement: 104)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
cand reached MaxWiringAttempts (10), forbidding
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
1_2 (add,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- creating inst add, width 8
before junk removal:
result %28
- creating inst and, width 8
before junk removal:
result %29
candidate:
result %29
didn't work for all inputs (#cex: 10, refinement: 105)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 1
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_2 (and,i8) 
1	0_2 (const,i8) 
2	0_1 (input,i8) 2_1 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %30
candidate:
result %30
didn't work for all inputs (#cex: 10, refinement: 106)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -56
- creating inst add, width 8
before junk removal:
%96:i8 = add 200:i8, %1
result %96
- creating inst and, width 8
before junk removal:
%97:i8 = and 0:i8, %96
result %97
candidate:
result %97
didn't work for all inputs (#cex: 10, refinement: 107)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -56
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 32
- creating inst add, width 8
before junk removal:
result %41
- creating inst and, width 8
before junk removal:
result %42
candidate:
result %42
didn't work for all inputs (#cex: 10, refinement: 108)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 32
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 4
- creating inst add, width 8
before junk removal:
result %91
- creating inst and, width 8
before junk removal:
result %92
candidate:
result %92
didn't work for all inputs (#cex: 10, refinement: 109)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 4
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_1 (input,i8) 1_1 (add,i8) 
2	0_3 (const,i8) 2_1 (and,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value -127
- creating inst add, width 8
before junk removal:
%98:i8 = add 129:i8, %1
result %98
- creating inst and, width 8
before junk removal:
%99:i8 = and 0:i8, %98
result %99
candidate:
result %99
didn't work for all inputs (#cex: 10, refinement: 110)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == -127
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_1 (input,i8) 1_1 (add,i8) 
3	1_0 (add,i8) 2_2 (and,i8) 
4	2_0 (and,i8) 3_0 (output,i8) 
found valid wiring, output 2_0 (and,i8).
creating program from wiring
- starting with OutLoc 2_0 (and,i8), OpLocs { 2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 3, taking 1_0 (add,i8)
- continue with OutLoc 1_0 (add,i8), OpLocs {1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 17
- creating inst add, width 8
before junk removal:
result %45
- creating inst and, width 8
before junk removal:
result %46
candidate:
result %46
didn't work for all inputs (#cex: 10, refinement: 111)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
cand reached MaxWiringAttempts (10), forbidding
3_0 (output,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
2_2 (and,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_2 (const,i8) 1_2 (add,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %4
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- creating inst add, width 8
before junk removal:
result %38
candidate:
result %38
didn't work for all inputs (#cex: 10, refinement: 112)
counterexample: in_0_1 = 3
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 1
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 1_1 (add,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 2_1 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 113)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_2 (and,i8) 
1	0_2 (const,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 114)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 
1	0_2 (const,i8) 1_1 (add,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 2_1 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 115)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_2 (and,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 1_2 (add,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 116)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 2_2 (and,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %95
candidate:
result %95
didn't work for all inputs (#cex: 10, refinement: 117)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_3 (const,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 2_1 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 118)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_2 (add,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- creating inst and, width 8
before junk removal:
result %4
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 1
- creating inst add, width 8
before junk removal:
result %38
candidate:
result %38
didn't work for all inputs (#cex: 10, refinement: 119)
counterexample: in_0_1 = 3
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 1
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 1_1 (add,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 120)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_2 (and,i8) 
1	0_3 (const,i8) 1_2 (add,i8) 
2	0_1 (input,i8) 2_1 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- creating inst and, width 8
before junk removal:
result %4
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- creating inst add, width 8
before junk removal:
result %38
candidate:
result %38
didn't work for all inputs (#cex: 10, refinement: 121)
counterexample: in_0_1 = 3
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_1 (and,i8) 
1	0_2 (const,i8) 2_2 (and,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %95
candidate:
result %95
didn't work for all inputs (#cex: 10, refinement: 122)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_2 (and,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 1_2 (add,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 2
- creating inst add, width 8
before junk removal:
result %95
candidate:
result %95
didn't work for all inputs (#cex: 10, refinement: 123)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 2
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_1 (add,i8) 1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value -128
- creating inst and, width 8
before junk removal:
result %36
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value -128
- creating inst and, width 8
before junk removal:
result %36
- creating inst add, width 8
before junk removal:
result %37
candidate:
result %37
didn't work for all inputs (#cex: 10, refinement: 124)
counterexample: in_0_1 = 2
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == -128
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == -128
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 2_2 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 125)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_2 (and,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 126)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 
1	0_3 (const,i8) 1_2 (add,i8) 2_2 (and,i8) 
2	0_1 (input,i8) 2_1 (and,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 127)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_2 (and,i8) 
1	0_2 (const,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 2_1 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 128)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_1 (and,i8) 
1	0_2 (const,i8) 1_1 (add,i8) 
2	0_3 (const,i8) 2_2 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %95
candidate:
result %95
didn't work for all inputs (#cex: 10, refinement: 129)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_2 (and,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- creating inst add, width 8
before junk removal:
result %95
candidate:
result %95
didn't work for all inputs (#cex: 10, refinement: 130)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_1 (and,i8) 
1	0_3 (const,i8) 1_1 (add,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %4
- creating inst add, width 8
before junk removal:
result %38
candidate:
result %38
didn't work for all inputs (#cex: 10, refinement: 131)
counterexample: in_0_1 = 3
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_2 (const,i8) 2_2 (and,i8) 
1	0_1 (input,i8) 2_1 (and,i8) 
2	0_3 (const,i8) 1_1 (add,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 1
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- creating inst and, width 8
before junk removal:
result %4
- creating inst add, width 8
before junk removal:
result %38
candidate:
result %38
didn't work for all inputs (#cex: 10, refinement: 132)
counterexample: in_0_1 = 3
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 1
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_1 (input,i8)
2_2 (and,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_2 (and,i8) 
1	0_3 (const,i8) 1_2 (add,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 133)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_1 (input,i8) 2_2 (and,i8) 
2	0_2 (const,i8) 1_2 (add,i8) 
3	1_1 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 1, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- creating inst add, width 8
before junk removal:
result %95
candidate:
result %95
didn't work for all inputs (#cex: 10, refinement: 134)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
1_2 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_1 (input,i8) 2_2 (and,i8) 
1	0_3 (const,i8) 2_1 (and,i8) 
2	0_2 (const,i8) 1_1 (add,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 2, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 2
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 1, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 0, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %95
candidate:
result %95
didn't work for all inputs (#cex: 10, refinement: 135)
counterexample: in_0_1 = 0
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 2
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. SAT
line	locations
0	0_3 (const,i8) 2_1 (and,i8) 
1	0_2 (const,i8) 1_1 (add,i8) 
2	0_1 (input,i8) 2_2 (and,i8) 
3	1_2 (add,i8) 2_0 (and,i8) 
4	1_0 (add,i8) 3_0 (output,i8) 
found valid wiring, output 1_0 (add,i8).
creating program from wiring
- starting with OutLoc 1_0 (add,i8), OpLocs { 1_1 (add,i8) 1_2 (add,i8) }
- looking for OpLoc wiring 1_1 (add,i8)
- found wiring input on line 1, taking 0_2 (const,i8)
- continue with OutLoc 0_2 (const,i8), OpLocs {}
- creating constant inst 0_2 (const,i8) with value 0
- looking for OpLoc wiring 1_2 (add,i8)
- found wiring input on line 3, taking 2_0 (and,i8)
- continue with OutLoc 2_0 (and,i8), OpLocs {2_1 (and,i8) 2_2 (and,i8) }
- looking for OpLoc wiring 2_1 (and,i8)
- found wiring input on line 0, taking 0_3 (const,i8)
- continue with OutLoc 0_3 (const,i8), OpLocs {}
- creating constant inst 0_3 (const,i8) with value 0
- looking for OpLoc wiring 2_2 (and,i8)
- found wiring input on line 2, taking 0_1 (input,i8)
- continue with OutLoc 0_1 (input,i8), OpLocs {}
- creating input inst 0_1 (input,i8)
- creating inst and, width 8
before junk removal:
result %11
- creating inst add, width 8
before junk removal:
result %31
candidate:
result %11
didn't work for all inputs (#cex: 10, refinement: 136)
counterexample: in_0_1 = 1
cand with constants, constraining wiring
3_0 (output,i8) == 1_0 (add,i8)
1_1 (add,i8) == 0_2 (const,i8)
with constant 0_2 (const,i8) == 0
1_2 (add,i8) == 2_0 (and,i8)
2_1 (and,i8) == 0_3 (const,i8)
with constant 0_3 (const,i8) == 0
2_2 (and,i8) == 0_1 (input,i8)
setting input in_0_1 to 1
setting input in_0_1 to -9
setting input in_0_1 to 11
setting input in_0_1 to -117
setting input in_0_1 to 0
setting input in_0_1 to 56
setting input in_0_1 to 19
setting input in_0_1 to 2
setting input in_0_1 to 3
solving synthesis constraint.. UNSAT
; no valid wiring found (8 wiring(s) with constants reached 10 MaxWiringAttempts)
; Failed to infer RHS
